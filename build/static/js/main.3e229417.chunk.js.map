{"version":3,"sources":["components/CityInput.js","components/Location.js","components/WeatherIcons.js","components/WeatherDescription.js","components/Temperature.js","components/Greeting.js","components/WeatherContainer.js","App.js","serviceWorker.js","index.js"],"names":["CityInput","props","onSubmit","submitHandler","onChange","changeHandler","type","Location","location","WeatherIcons","icon","className","WeatherDescription","description","Temperature","fahrenheit","celsius","Greeting","message","kelvinToCelsius","k","Math","round","WeatherContainer","weather","main","temp","userTime","App","useState","address","setAddress","geolocation","setGeolocation","setWeather","didMount","useRef","useEffect","current","url","fetch","then","res","json","data","list","e","target","value","preventDefault","encodeURIComponent","features","place_name","center","Date","getHours","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.3e229417.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function CityInput(props) {\n  return (\n    <form onSubmit={props.submitHandler}>\n      <input onChange={props.changeHandler} type=\"text\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n","import React from 'react';\n\nexport default function Location(props) {\n  return <p>{props.location}</p>;\n}\n","import React from 'react';\n\nexport default function WeatherIcons(props) {\n  return (\n    <>\n      {props.icon === '01d' || props.icon === '01n' ? (\n        <i className=\"fad fa-sun fa-4x p-2\" />\n      ) : (\n        <i className=\"fal fa-sun fa-4x p-2\" />\n      )}\n\n      {props.icon === '02d' || props.icon === '02n' ? (\n        <i className=\"fad fa-cloud-sun fa-4x p-2\" />\n      ) : (\n        <i className=\"fal fa-cloud-sun fa-4x p-2\" />\n      )}\n\n      {props.icon === '03d' ||\n      props.icon === '03n' ||\n      props.icon === '04d' ||\n      props.icon === '04n' ? (\n        <i className=\"fad fa-clouds fa-4x p-2\" />\n      ) : (\n        <i className=\"fal fa-clouds fa-4x p-2\" />\n      )}\n\n      {props.icon === '01d' ||\n      props.icon === '01n' ||\n      props.icon === '02d' ||\n      props.icon === '02n' ||\n      props.icon === '03d' ||\n      props.icon === '03n' ||\n      props.icon === '04d' ||\n      props.icon === '04n' ? (\n        <i className=\"fal fa-cloud-drizzle fa-4x p-2\" />\n      ) : null}\n\n      {props.icon === '09d' || props.icon === '09n' ? (\n        <i className=\"fad fa-cloud-drizzle fa-4x p-2\" />\n      ) : null}\n\n      {props.icon === '10d' || props.icon === '10n' ? (\n        <i className=\"fad fa-cloud-showers-heavy fa-4x p-2\" />\n      ) : null}\n\n      {props.icon === '11d' || props.icon === '11n' ? (\n        <i className=\"fad fa-thunderstorm fa-4x p-2\" />\n      ) : null}\n\n      {props.icon === '13d' || props.icon === '13n' ? (\n        <i className=\"fad fa-cloud-snow fa-4x p-2\" />\n      ) : null}\n\n      {props.icon === '50d' || props.icon === '50n' ? (\n        <i className=\"fad fa-fog fa-4x p-2\" />\n      ) : null}\n    </>\n  );\n}\n","import React from 'react';\n\nexport default function WeatherDescription(props) {\n  return <p>{props.description} tomorrow...</p>;\n}\n","import React from 'react';\n\nconst Temperature = props => (\n  <>\n    <p>\n      {props.fahrenheit}ºF / {props.celsius}ºC\n    </p>\n  </>\n);\n\nexport default Temperature;\n","import React from 'react';\n\nexport default function Greeting(props) {\n  return <p>{props.message}</p>;\n}\n","import React from 'react';\nimport Location from './Location';\nimport WeatherIcons from './WeatherIcons';\nimport WeatherDescription from './WeatherDescription';\nimport Temperature from './Temperature';\nimport Greeting from './Greeting.js';\n\nconst kelvinToFahrenheit = k => {\n  return Math.round(((k - 273.15) * 1.8 + 32) * 10) / 10;\n};\n\nconst kelvinToCelsius = k => {\n  return Math.round((k - 273.15) * 10) / 10;\n};\n\nconst WeatherContainer = props => {\n  return (\n    <>\n      <Location location={props.location} />\n\n      <WeatherIcons icon={props.weather.weather[0].icon} />\n\n      <WeatherDescription description={props.weather.weather[0].description} />\n\n      <Temperature\n        fahrenheit={kelvinToFahrenheit(props.weather.main.temp)}\n        celsius={kelvinToCelsius(props.weather.main.temp)}\n      />\n\n      {props.userTime >= 18 || props.userTime <= 4 ? (\n        <Greeting message=\"good night and sweet seafaring dreams\" />\n      ) : (\n        <Greeting />\n      )}\n    </>\n  );\n};\n\nexport default WeatherContainer;\n","import React, { useState, useEffect, useRef } from 'react';\nimport CityInput from './components/CityInput';\nimport WeatherContainer from './components/WeatherContainer';\nimport Footer from './components/Footer';\nimport './App.css';\n\nfunction App() {\n  const [address, setAddress] = useState('');\n  const [geolocation, setGeolocation] = useState([]);\n  const [weather, setWeather] = useState(null);\n  const didMount = useRef(true);\n\n  useEffect(() => {\n    if (didMount.current) {\n      didMount.current = false;\n    } else {\n      const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${geolocation[1]}&lon=${geolocation[0]}&appid=14715648d5b5f1ec6117655c97b891de`;\n\n      fetch(url)\n        .then(res => res.json())\n        .then(data => {\n          setWeather(data.list[1]);\n        });\n    }\n  }, [geolocation]);\n\n  const changeHandler = e => {\n    setAddress(e.target.value);\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(\n      address\n    )}.json?access_token=pk.eyJ1Ijoic3VwZXJoYWNrZXJtYW4iLCJhIjoiY2s3a3J3eTZqMDA1bTNscG1sdTA3eTJmayJ9.P-J5RMF_i4GyThSIYhoVFg&limit=1`;\n\n    // gets user's geolocation and suggested address\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        setAddress(data.features[0].place_name);\n        setGeolocation(data.features[0].center);\n      });\n  };\n\n  const getTime = () => {\n    return new Date().getHours();\n  };\n\n  return (\n    <>\n      <CityInput changeHandler={changeHandler} submitHandler={submitHandler} />\n      {weather === null ? null : (\n        <WeatherContainer\n          weather={weather}\n          location={address}\n          userTime={getTime()}\n        />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}